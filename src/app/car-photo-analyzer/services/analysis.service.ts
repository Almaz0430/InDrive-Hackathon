import { Injectable } from '@angular/core';
import { Observable, of } from 'rxjs';
import { delay } from 'rxjs/operators';

export interface AnalysisResult {
  cleanliness: CleanlinessResult;
  integrity: IntegrityResult;
  timestamp: Date;
  imageUrl: string;
}

export interface CleanlinessResult {
  status: 'clean' | 'dirty' | 'slightly-dirty' | 'very-dirty';
  confidence: number;
  displayText: string;
}

export interface IntegrityResult {
  status: 'intact' | 'damaged';
  confidence: number;
  displayText: string;
}

@Injectable({
  providedIn: 'root'
})
export class AnalysisService {
  private readonly minProcessingTime = 2000; // 2 —Å–µ–∫—É–Ω–¥—ã
  private readonly maxProcessingTime = 3000; // 3 —Å–µ–∫—É–Ω–¥—ã

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç mock —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
   * @param imageData - Base64 –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ URL
   * @returns Observable<AnalysisResult> —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞
   */
  analyzeImage(imageData: string): Observable<AnalysisResult> {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç 2 –¥–æ 3 —Å–µ–∫—É–Ω–¥
    const processingTime = this.getRandomProcessingTime();
    
    return of(this.generateMockResult(imageData)).pipe(
      delay(processingTime)
    );
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
   * @returns –í—Ä–µ–º—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
   */
  private getRandomProcessingTime(): number {
    return Math.floor(
      Math.random() * (this.maxProcessingTime - this.minProcessingTime + 1)
    ) + this.minProcessingTime;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç mock —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
   * @param imageUrl - URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   * @returns AnalysisResult —Å —Å–ª—É—á–∞–π–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
   */
  private generateMockResult(imageUrl: string): AnalysisResult {
    const cleanliness = this.generateCleanlinessResult();
    const integrity = this.generateIntegrityResult();

    return {
      cleanliness,
      integrity,
      timestamp: new Date(),
      imageUrl
    };
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —á–∏—Å—Ç–æ—Ç—ã
   * @returns CleanlinessResult
   */
  private generateCleanlinessResult(): CleanlinessResult {
    const statuses: CleanlinessResult['status'][] = ['clean', 'dirty', 'slightly-dirty', 'very-dirty'];
    const status = statuses[Math.floor(Math.random() * statuses.length)];
    const confidence = Math.floor(Math.random() * 30) + 70; // 70-100%

    return {
      status,
      confidence,
      displayText: this.getCleanlinessDisplayText(status)
    };
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
   * @returns IntegrityResult
   */
  private generateIntegrityResult(): IntegrityResult {
    const statuses: IntegrityResult['status'][] = ['intact', 'damaged'];
    const status = statuses[Math.floor(Math.random() * statuses.length)];
    const confidence = Math.floor(Math.random() * 30) + 70; // 70-100%

    return {
      status,
      confidence,
      displayText: this.getIntegrityDisplayText(status)
    };
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ —á–∏—Å—Ç–æ—Ç—ã
   * @param status - –°—Ç–∞—Ç—É—Å —á–∏—Å—Ç–æ—Ç—ã
   * @returns –û—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç
   */
  private getCleanlinessDisplayText(status: CleanlinessResult['status']): string {
    const statusMap: Record<CleanlinessResult['status'], string> = {
      'clean': '–ß–∏—Å—Ç—ã–π',
      'dirty': '–ì—Ä—è–∑–Ω—ã–π',
      'slightly-dirty': '–°–ª–µ–≥–∫–∞ –≥—Ä—è–∑–Ω—ã–π',
      'very-dirty': '–°–∏–ª—å–Ω–æ –≥—Ä—è–∑–Ω—ã–π'
    };
    return statusMap[status];
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
   * @param status - –°—Ç–∞—Ç—É—Å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
   * @returns –û—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç
   */
  private getIntegrityDisplayText(status: IntegrityResult['status']): string {
    const statusMap: Record<IntegrityResult['status'], string> = {
      'intact': '–¶–µ–ª—ã–π',
      'damaged': '–ë–∏—Ç—ã–π'
    };
    return statusMap[status];
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∫–æ–Ω–∫—É –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ —á–∏—Å—Ç–æ—Ç—ã
   * @param status - –°—Ç–∞—Ç—É—Å —á–∏—Å—Ç–æ—Ç—ã
   * @returns –≠–º–æ–¥–∑–∏ –∏–∫–æ–Ω–∫–∞
   */
  getCleanlinessIcon(status: CleanlinessResult['status']): string {
    const iconMap: Record<CleanlinessResult['status'], string> = {
      'clean': 'üöò',
      'dirty': 'üöó',
      'slightly-dirty': 'üöô',
      'very-dirty': 'üöö'
    };
    return iconMap[status];
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∫–æ–Ω–∫—É –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
   * @param status - –°—Ç–∞—Ç—É—Å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
   * @returns –≠–º–æ–¥–∑–∏ –∏–∫–æ–Ω–∫–∞
   */
  getIntegrityIcon(status: IntegrityResult['status']): string {
    const iconMap: Record<IntegrityResult['status'], string> = {
      'intact': 'üõ†',
      'damaged': 'üîß'
    };
    return iconMap[status];
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º (—Ö–æ—Ä–æ—à–∏–º)
   * @param result - –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
   * @returns true –µ—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π
   */
  isPositiveResult(result: AnalysisResult): boolean {
    return result.cleanliness.status === 'clean' && result.integrity.status === 'intact';
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç CSS –∫–ª–∞—Å—Å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
   * @param status - –°—Ç–∞—Ç—É—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
   * @param isCleanliness - –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —á–∏—Å—Ç–æ—Ç—ã
   * @returns CSS –∫–ª–∞—Å—Å
   */
  getResultCssClass(status: string, isCleanliness: boolean = true): string {
    if (isCleanliness) {
      return status === 'clean' ? 'success' : 'error';
    } else {
      return status === 'intact' ? 'success' : 'error';
    }
  }
}
